generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id             String         @id @default(uuid())
  name           String
  type           String
  serialNumber   String         @unique
  price          Decimal
  image          String
  purchaseDate   DateTime
  warrantyExpiry DateTime?
  status         AssetStatus    @default(Available)
  locationId     String
  notes          String?
  purchaseType   purchaseStatus @default(NEW)
  isDeleted      Boolean        @default(false)

  location    Location?       @relation(fields: [locationId], references: [id])
  assignments AssetAssigned[]
  repairs     RepairLog[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  RequestLog RequestLog[]
  AssetLog   AssetLog[]
}

model AssetAssigned {
  id           String  @id @default(uuid())
  assetId      String
  assignedById String
  receivedById String?

  assignedDate          DateTime
  employeeName          String
  returnDate            DateTime?
  conditionAtAssignment String?
  conditionAtReturn     String?
  departmentId          String?

  department Department? @relation(fields: [departmentId], references: [id])
  asset      Asset       @relation(fields: [assetId], references: [id])
  assignedBy Admin       @relation(fields: [assignedById], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Admin {
  id                     String    @id @default(uuid())
  firstName              String
  lastName               String
  email                  String    @unique
  phoneNumber            String?
  status                 String    @default("Active")
  roleId                 String?
  password               String
  passwordResetToken     String?
  passwordResetExpiresAt DateTime?
  isEnabled              Boolean   @default(true)

  role            Role?           @relation(fields: [roleId], references: [id])
  requestLogs     RequestLog[]
  permissions     String[]
  assignments     AssetAssigned[]
  reportedRepairs RepairLog[]
  auditLogs       AuditLog[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  AssetLog        AssetLog[]
}

model Department {
  id        String  @id @default(uuid())
  name      String  @unique
  createdBy String
  isDeleted Boolean @default(false)

  assignments AssetAssigned[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  RequestLog  RequestLog[]
}

model Location {
  id        String  @id @default(uuid())
  name      String  @unique
  address   String?
  createdBy String
  isDeleted Boolean @default(false)

  assets    Asset[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestLog {
  id            String        @id @default(uuid())
  adminId       String
  assetId       String
  employeeName  String
  departmentId  String?
  requestDate   DateTime      @default(now())
  description   String?
  requestStatus RequestStatus @default(Pending)

  asset      Asset?      @relation(fields: [assetId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  admin      Admin       @relation(fields: [adminId], references: [id])
  repairLogs RepairLog[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model RepairLog {
  id           String       @id @default(uuid())
  adminId      String
  assetId      String
  repairDate   DateTime     @default(now())
  description  String?
  repairCost   Decimal?
  repairedBy   String?
  repairStatus RepairStatus @default(Pending)
  requestLogId String?

  asset      Asset?      @relation(fields: [assetId], references: [id])
  requestLog RequestLog? @relation(fields: [requestLogId], references: [id])
  admin      Admin       @relation(fields: [adminId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  permissions String[]
  isDeleted   Boolean   @default(false)
  role        AdminRole @default(admin)

  admins    Admin[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssetLog {
  id          String         @id @default(uuid())
  assetId     String
  adminId     String?
  eventType   AssetEventType
  description String?
  eventDate   DateTime       @default(now())

  asset     Asset    @relation(fields: [assetId], references: [id])
  admin     Admin?   @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id          String @id @default(uuid())
  adminId     String
  ipAddress   String
  action      String
  request     Json
  response    Json
  timeElapsed Int

  timestamp DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id])
}

enum purchaseStatus {
  NEW
  USED
}

enum AssetStatus {
  Available
  Assigned
  UnderRepair
  Retired
  RequestRepair
}

enum AdminRole {
  admin
  superAdmin
}

enum AdminStatus {
  Active
  Inactive
  Suspended
}

enum RepairStatus {
  Pending
  InProgress
  Completed
  Cancelled
}

enum RequestStatus {
  Pending
  Approved
  Declined
}

enum AssetEventType {
  Created
  Assigned
  Returned
  RepairRequested
  RepairStarted
  RepairCompleted
  Disposed
  Updated
  Deleted
}
